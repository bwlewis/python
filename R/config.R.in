
PYTHON_BIN <- "@PYTHON_BIN@"
PKG_LIBS <- "@PKG_LIBS@"
NUMPY_INCLUDE_DIR <- "@NUMPY_INCLUDE_DIR@"
PYTHON_PREFIX <- "@PYTHON_PREFIX@"


# Python configuration
#
# Retreive a list containing Python configuration information including the
# \code{python} binary and \code{libpython} the package was built against and
# the location of the \code{numpy} include directory the package was built
# against.
py_config <- function() {

  # extract python library from PKG_LIBS
  match <- regexpr("-lpython\\d+\\.\\d+", PKG_LIBS)
  if (match == -1)
    stop("Unable to parse -lpython from ", PKG_LIBS)
  libpython_lib <- regmatches(PKG_LIBS, match)
  libpython_lib <- substring(libpython_lib, 3)
  ext <- ifelse(Sys.info()[["sysname"]] == "Darwin", ".dylib", ".so")
  libpython_lib <- paste0("lib", libpython_lib, ext)

  # extract full path to libpython from PKG_LIBS
  match <- regexpr("-L[^ ]+", PKG_LIBS)
  if (match != -1) {
    libpython_dir <- regmatches(PKG_LIBS, match)
    libpython_dir <- substring(libpython_dir, 3)
  } else {
    # try to use the PYTHON_PREFIX
    libpython_dir <- NULL
    for(path in c("lib", "lib64", "x86_64-linux-gnu")) {
      if (file.exists(file.path(PYTHON_PREFIX, path, libpython_lib))) {
        libpython_dir <- file.path(PYTHON_PREFIX, path)
        break
      }
    }
    if (is.null(libpython_dir))
      stop("Unable to determine libpython path using --ldflags and --prefix")
  }

  # return configuration
  list(python = PYTHON_BIN,
       libpython = file.path(libpython_dir, libpython_lib),
       numpy = NUMPY_INCLUDE_DIR)
}
